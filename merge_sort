// Merge Sort is a divide and conquers algorithm, it divides the given array into equal parts and then merges the 2 sorted parts. 
// There are 2 main functions :
merge(): This function is used to merge the 2 halves of the array. It assumes that both parts of the array are sorted and merges both of them.
mergeSort(): This function divides the array into 2 parts. low to mid and mid+1 to high where,
 low = leftmost index of the array
 high = rightmost index of the array
 mid = Middle index of the array 


    void merge(int arr[], int low, int mid, int high)
    {
        vector<int>temp;
        int left=low;
        int right=mid+1;
        
        //storing elements in temporary array
        while(left<=mid && right<=high)
        {
            if(arr[left]<=arr[right])
            {
                temp.push_back(arr[left]);
                left++;
            }
            else
            {
                temp.push_back(arr[right]);
                right++;
            }
        }
        
        //if elements on left half are still left
        while(left<=mid)
        {
            temp.push_back(arr[left]);
            left++;
        }
        
        //if elements on right half are still left
        while(right<=high)
        {
            temp.push_back(arr[right]);
            right++;
        }
        
        //transfering all elements from temp to arr
        for(int i=low; i<=high; i++)
        {
            arr[i]=temp[i-low];
        }
    }
  
    void mergeSort(int arr[], int low, int high)
    {
         if(low>=high) return;
         int mid=(low+high)/2;
         mergeSort(arr, low, mid);
         mergeSort(arr, mid+1, high);
         merge(arr, low, mid, high);
    }


Time Complexity: O(nlogn)
Space complexity: O(n)
